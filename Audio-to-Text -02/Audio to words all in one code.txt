import requests
# To Communicate with api key

from api_secrets import API_KEY
#just a python code we creadted to store asembly ai api key

import sys
# reading file

import time


# 1. upload the file to assembly ai

# https://www.assemblyai.com/docs/walkthroughs#uploading-local-files-for-transcription
# for refernce code


upload_endpoint = "https://api.assemblyai.com/v2/upload"
transcript_endpoint = "https://api.assemblyai.com/v2/transcript"


# we want both upload and transcribe to reach this header
headers = {'authorization': API_KEY}

filename = sys.argv[1]

#  sys.argv[1] gets the filename argument passed to the script,
# and then opens and reads the contents of the file.

def upload(filename):
    
    def read_file(filename, chunk_size=5242880):
        with open(filename, 'rb') as _file:
            while True:
                data = _file.read(chunk_size)
                if not data:
                    break
                yield data

    upload_response = requests.post(upload_endpoint,
                            headers=headers,
                            data=read_file(filename))

    # print(response.json())

    #extracting our response
    audio_url = upload_response.json()['upload_url']
    return audio_url



# 2. 


# Transcibe 
# json is the data that we want assembly ai to transcribe
def transcribe(audio_url):
    transcript_request= { "audio_url": audio_url }
    transcript_response = requests.post(transcript_endpoint, json=transcript_request, headers=headers)
    # print(response.json())
    job_id = transcript_response.json()['id']
    return job_id


## calling upload and transcribe functions

audio_url = upload(filename)
# job_id = transcribe(audio_url)
# print(job_id)

## transcript_id = transcribe(audio_url)





# 3.

# keep polling assembly ai to see when 
#transciption is done

# A polling endpoint refers to a specific URL or 
# endpoint in a web application that a client
# can use to periodically check for updates
# or new information. 

# so this is our url to ask assembly 
# ai that if our job is done or not

def poll(transcript_id):  # so instead of polling in while we can use this funtion
    polling_endpoint = transcript_endpoint + '/' + transcript_id
    polling_response = requests.get(polling_endpoint ,headers=headers) #asking or information

    return polling_response.json()

# so we need the status from this json 

# lets ask assembly ai that if our job is done or not
def get_transcription_result_url(audio_url):
    transcript_id = transcribe(audio_url)
    while True:
        data = poll(transcript_id)
        if data['status'] == 'completed':
            return data , None
        elif data['status'] == 'error':
            return data ,data["error"] 
    
        print('waiting 30 seconds...')
        time.sleep(30)

#audio_url = upload(filename)
#data , error = get_transcription_result_url(audio_url)

#print(data)


# so now all we want to do is write this data into txt file in the next step, 4


# 4.

# save the transcript
def save_transscript(audio_url):   
    data , error = get_transcription_result_url(audio_url)
    if data: 
        text_filenname = ".txt"
        with open(text_filenname , "w") as  f:
            f.write(data['text'])
        print('Transcription saved!')
        
    elif error :
        print("Error!" , error)



audio_url = upload(filename)
save_transscript(audio_url)